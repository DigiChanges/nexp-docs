/*
 * Node Experience
 * Open API Specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: nathan@digichanges.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Assign Roles To User
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiUsersAssignRoleUSERIDPutTest() throws ApiException {
        String USER_ID = null;
        String contentType = null;
        Object body = null;
        Object response = api.apiUsersAssignRoleUSERIDPut(USER_ID, contentType, body);

        // TODO: test validations
    }
    
    /**
     * Change My Password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiUsersChangeMyPasswordPostTest() throws ApiException {
        String contentType = null;
        Object body = null;
        Object response = api.apiUsersChangeMyPasswordPost(contentType, body);

        // TODO: test validations
    }
    
    /**
     * Change User Password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiUsersChangeUserPasswordUSERIDPutTest() throws ApiException {
        String USER_ID = null;
        String contentType = null;
        Object body = null;
        api.apiUsersChangeUserPasswordUSERIDPut(USER_ID, contentType, body);

        // TODO: test validations
    }
    
    /**
     * Get Users Filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiUsersGetTest() throws ApiException {
        String contentType = null;
        Integer paginationLimit = null;
        Integer paginationOffset = null;
        Boolean filterEnable = null;
        String filterEmail = null;
        Object response = api.apiUsersGet(contentType, paginationLimit, paginationOffset, filterEnable, filterEmail);

        // TODO: test validations
    }
    
    /**
     * Add One User
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiUsersPostTest() throws ApiException {
        String contentType = null;
        Object body = null;
        Object response = api.apiUsersPost(contentType, body);

        // TODO: test validations
    }
    
    /**
     * Delete User
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiUsersUSERIDDeleteTest() throws ApiException {
        String USER_ID = null;
        String contentType = null;
        Object response = api.apiUsersUSERIDDelete(USER_ID, contentType);

        // TODO: test validations
    }
    
    /**
     * Get One User
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiUsersUSERIDGetTest() throws ApiException {
        String USER_ID = null;
        String contentType = null;
        Object response = api.apiUsersUSERIDGet(USER_ID, contentType);

        // TODO: test validations
    }
    
    /**
     * Update User
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiUsersUSERIDPutTest() throws ApiException {
        String USER_ID = null;
        String contentType = null;
        Object body = null;
        Object response = api.apiUsersUSERIDPut(USER_ID, contentType, body);

        // TODO: test validations
    }
    
}
