/*
 * Node Experience
 * Open API Specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: nathan@digichanges.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FileApi
 */
@Ignore
public class FileApiTest {

    private final FileApi api = new FileApi();

    
    /**
     * Update file by Base64
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiFilesBase64FILEIDPutTest() throws ApiException {
        String FILE_ID = null;
        String contentType = null;
        Object body = null;
        Object response = api.apiFilesBase64FILEIDPut(FILE_ID, contentType, body);

        // TODO: test validations
    }
    
    /**
     * Upload file by Base64
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiFilesBase64PostTest() throws ApiException {
        String contentType = null;
        Boolean hasOriginalName = null;
        Boolean isPublic = null;
        Boolean optimize = null;
        Object body = null;
        Object response = api.apiFilesBase64Post(contentType, hasOriginalName, isPublic, optimize, body);

        // TODO: test validations
    }
    
    /**
     * Delete File
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiFilesFILEIDDeleteTest() throws ApiException {
        String FILE_ID = null;
        Object response = api.apiFilesFILEIDDelete(FILE_ID);

        // TODO: test validations
    }
    
    /**
     * Get File
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiFilesFILEIDGetTest() throws ApiException {
        String FILE_ID = null;
        Object response = api.apiFilesFILEIDGet(FILE_ID);

        // TODO: test validations
    }
    
    /**
     * Update file by Multipart
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiFilesFILEIDPutTest() throws ApiException {
        String FILE_ID = null;
        String contentType = null;
        File file = null;
        Object response = api.apiFilesFILEIDPut(FILE_ID, contentType, file);

        // TODO: test validations
    }
    
    /**
     * Get Files Filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiFilesGetTest() throws ApiException {
        String contentType = null;
        Integer paginationLimit = null;
        Integer paginationOffset = null;
        Object response = api.apiFilesGet(contentType, paginationLimit, paginationOffset);

        // TODO: test validations
    }
    
    /**
     * Get File Metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiFilesMetadataFILEIDGetTest() throws ApiException {
        String FILE_ID = null;
        Object response = api.apiFilesMetadataFILEIDGet(FILE_ID);

        // TODO: test validations
    }
    
    /**
     * Get S3 Objects
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiFilesObjectsGetTest() throws ApiException {
        String contentType = null;
        Object response = api.apiFilesObjectsGet(contentType);

        // TODO: test validations
    }
    
    /**
     * Upload file by Multipart
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiFilesPostTest() throws ApiException {
        String contentType = null;
        Boolean hasOriginalName = null;
        Boolean isPublic = null;
        File file = null;
        Object response = api.apiFilesPost(contentType, hasOriginalName, isPublic, file);

        // TODO: test validations
    }
    
    /**
     * Get Presigned Get Object
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiFilesPresignedGetObjectPostTest() throws ApiException {
        String contentType = null;
        Boolean isPublic = null;
        Object body = null;
        Object response = api.apiFilesPresignedGetObjectPost(contentType, isPublic, body);

        // TODO: test validations
    }
    
}
